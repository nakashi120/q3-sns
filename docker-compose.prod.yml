version: "3"

# volumes:
#   node_modules_volume:

volumes:
  postgres_data:
  static_volume:
  media_volume:

services:
  rest_api:
    build:
      context: ./
      dockerfile: DockerfilePython
    # ports:
    #   - "8000:8000"
    expose:
      - '8000'
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    # volumes:
    #   - ./code/django_rest_api:/code
    command: >
      gunicorn config.wsgi:application --bind 0.0.0.0:8000
# sh -c "python manage.py runserver 0.0.0.0:8000"
    env_file:
      - ./.env.dev
    depends_on:
      - db

  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.dev

  nginx:
    build: 
      context: ./code/django_rest_api/nginx
      dockerfile: DockerfileNginx
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/media
    ports:
      - 1317:80
    depends_on:
      - rest_api

#   web_front:
#     build:
#       context: .
#       dockerfile: DockerfileNode
#     ports:
#       - "3000:3000"
#     volumes:
#       - ./code/react_web_front:/code
# #     If we don't mounted "node_modules" directory, it takes long time to use yarn command.
# #     Because all node module packages will be installed at every yarn command
# #     ex) yarn add "package-name"
#       # - 'node_modules_volume:/code/node_modules'
# #   When we create a container FIRST TIME, we have to use below command to create-react-app
#     tty: true
#     command: >
#       sh -c "cd /code && npm start"
    # depends_on:
    #   - rest_api